name: Release Build CI - Android Arm7 Only
on:
  workflow_dispatch:

jobs:        
  Android-arm7:
    runs-on: ubuntu-latest
    env:
      ANDROID_NDK_HOME: ${{github.workspace}}/android-ndk/android-ndk-r27b
      ANDROID_TOOLCHAIN: ${{github.workspace}}/android-ndk/android-ndk-r27b/toolchains/llvm/prebuilt/linux-x86_64/bin
      NDK_URL: "https://dl.google.com/android/repository/android-ndk-r27b-linux.zip"      
      CC: clang
      
    steps:
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v6

      - name: Set clang as the default compiler
        run: |
          sudo update-alternatives --install /usr/bin/cc cc $(which clang) 100
          sudo update-alternatives --install /usr/bin/c++ c++ $(which clang++) 100
          sudo update-alternatives --set cc $(which clang)
          sudo update-alternatives --set c++ $(which clang++)
          
      - name: Install GitHub CLI
        run: |
          sudo apt install -y gh

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Define Release Tag
        id: release-tag
        run: echo "RELEASE_TAG=Android-armeabi-v7a-develop-Release" >> $GITHUB_ENV

      - name: Download Prebuilt Boost from Thirdparty
        shell: bash
        run: |
          gh release download \
            --repo GeniusVentures/thirdparty \
            Android-develop-Release \
            --pattern Boost-lib.tar.gz

      - name: Ensure Directory Exists
        run: |
          mkdir -p ${{github.workspace}}/thirdparty/build/Android/Release/armeabi-v7a

      - name: Extract Prebuilt Boost
        run: |
          tar -xzvf Boost-lib.tar.gz -C ${{github.workspace}}/thirdparty/build/Android/Release/armeabi-v7a

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          path: 'zkLLVM'
          submodules: "recursive"
          
      - name: Download Android NDK
        run: |
          mkdir "${{github.workspace}}/android-ndk" 
          cd "${{github.workspace}}/android-ndk" 
          curl -o ndk.zip ${{ env.NDK_URL }} 
          unzip ndk.zip 
          rm ndk.zip
      
      - name: Create Build Directory
        run: cmake -E make_directory ${{github.workspace}}/zkLLVM/build/Android/Release/armeabi-v7a           

      - name: Configure CMake
        working-directory: ${{github.workspace}}/zkLLVM/build/Android/Release/armeabi-v7a    
        run: |
          export ANDROID_NDK=${{env.ANDROID_NDK_HOME}}
          export ANDROID_NDK_HOME=${{env.ANDROID_NDK_HOME}}
          export ANDROID_TOOLCHAIN=${{env.ANDROID_TOOLCHAIN}}
          export PATH=${{env.ANDROID_TOOLCHAIN}}:$PATH 
          echo $PATH
          echo $CC
          ls -la $ANDROID_TOOLCHAIN
          echo "Check clang path:"
          which clang
          env
          cmake -S ../../ -DANDROID_ABI="armeabi-v7a" -DCMAKE_BUILD_TYPE=Release -DCMAKE_ANDROID_NDK=$ANDROID_NDK -DANDROID_TOOLCHAIN=clang -DTHIRDPARTY_DIR=${{github.workspace}}/thirdparty/
      
      - name: Compile
        working-directory: ${{github.workspace}}/zkLLVM/build/Android/Release/armeabi-v7a 
        run: make -j8
      
      - name: Install
        working-directory: ${{github.workspace}}/zkLLVM/build/Android/Release/armeabi-v7a 
        run: cmake --install .
        
      - name: Compressing Build Artifacts
        working-directory: ${{github.workspace}}/zkLLVM
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          shopt -s extglob
          rm -rf !(build) .[!.]* ..?*
          cd build
          rm -rf !(Android) .[!.]* ..?*
          cd Android
          rm -rf !(Release) .[!.]* ..?*
          cd Release
          rm -rf !(armeabi-v7a) .[!.]* ..?*
          cd armeabi-v7a
          rm -rf !(zkLLVM) .[!.]* ..?*
          cd ${{github.workspace}}
          tar --exclude='zkLLVM/build/Android/Release/zkLLVM/src' \
              --exclude='zkLLVM/build/Android/Release/zkLLVM/tmp' \
              -czvf zkLLVM.tar.gz zkLLVM/
      
      - name: Set Release Variables
        id: vars
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          OS_NAME=Android-armeabi-v7a
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          BUILD_TYPE=Release
          FILE_NAME="${OS_NAME}-${BRANCH_NAME}-${BUILD_TYPE}.tar.gz"
          echo "RELEASE_TAG=${OS_NAME}-${BRANCH_NAME}-${BUILD_TYPE}-${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "RELEASE_NAME=${OS_NAME} ${BRANCH_NAME} ${BUILD_TYPE} (${GITHUB_SHA::7})" >> $GITHUB_ENV
          echo "FILE_NAME=$FILE_NAME" >> $GITHUB_ENV

      - name: Rename Artifact
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: mv zkLLVM.tar.gz ${{ env.FILE_NAME }}

      - name: Create GitHub Release
        if: ${{ github.event_name == 'workflow_dispatch' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GNUS_TOKEN_1 }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: ${{ env.RELEASE_NAME }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GNUS_TOKEN_1 }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.FILE_NAME }}
          asset_name: ${{ env.FILE_NAME }}
          asset_content_type: application/gzip