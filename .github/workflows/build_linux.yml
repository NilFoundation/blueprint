name: build-linux

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '.github/workflows/*macos.yml'
      - 'docs/**'
      - '.clang-format'
      - '.gitignore'
      - 'README.md'
  pull_request:
    paths-ignore:
      - '.github/workflows/*macos.yml'
      - 'docs/**'
      - '.clang-format'
      - '.gitignore'
      - 'README.md'

concurrency:
  group: ${{
    ( github.ref == 'refs/heads/master' &&
    format('{0}/{1}', github.run_id, github.run_attempt) )
    ||
    format('{0}/{1}', github.workflow, github.ref) }}
  cancel-in-progress: true

jobs:
  build-linux:
    runs-on: [ self-hosted, Linux, amd64 ]

    env:
      CONTAINER_TMP: /opt/
      HOST_TMP: /home/runner/work/_temp/
      DEBIAN_FRONTEND: noninteractive
      BOOST_VERSION: "1.80.0"

    container:
      image: ubuntu:22.04
      volumes:
        - /home/runner/work/_temp/:/opt/

    steps:
      - name: Install dependencies
        run: |
          env && \
          apt update && \
          apt install -y \
            build-essential \
            libssl-dev \
            cmake \
            git \
            libicu-dev \
            curl \
            pkg-config \
            gawk

      - name: Print toolchain information
        run: |
          git --version
          cc --version
          cmake --version

      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 0

      # Workaround: https://github.com/actions/checkout/issues/1169
      - name: Mark directory as safe
        run: |
          git config --system --add safe.directory $PWD

      - name: Install boost
        uses: MarkusJx/install-boost@v2.4.1
        id: install-boost
        with:
            # A list of supported versions can be found here:
            # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
            boost_version: ${{ env.BOOST_VERSION }}
            boost_install_dir: ${{ env.CONTAINER_TMP }}
            platform_version: 22.04
            toolset: gcc
            arch: x86

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Configure CMake
        env:
          BOOST_ROOT: "${{ steps.install-boost.outputs.BOOST_ROOT }}"
        run: |
          cmake -G "Unix Makefiles" \
            -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCIRCUIT_ASSEMBLY_OUTPUT=TRUE .

      - name: Build zkllvm
        run: |
          make -C build assigner clang transpiler -j$(nproc)

      - name: Build examples
        run: |
          make -C build circuit_examples -j$(nproc)
          ls -al ./build/examples

      - name: Build circuits
        run: |
          make -C build run_examples -j$(nproc)

      - name: Build rslang
        run: |
          export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$(pwd)/build/libs/circifier/llvm/lib"
          make -C build rslang -j$(nproc)
