name: build-linux

on:
  push:
    branches: [ master ]
  pull_request:

concurrency:
  group: ${{
    ( github.ref == 'refs/heads/master' &&
    format('{0}/{1}', github.run_id, github.run_attempt) )
    ||
    format('{0}/{1}', github.workflow, github.ref) }}
  cancel-in-progress: true

jobs:
  handle-syncwith:
    if: github.event_name == 'pull_request'
    name: Call Reusable SyncWith Handler
    uses: NilFoundation/ci-cd/.github/workflows/reusable-handle-syncwith.yml@v1
    with:
      ci-cd-ref: 'v1'
    secrets: inherit

  build-and-test-linux:
    runs-on: [ self-hosted, Linux, X64, aws_autoscaling ]

    needs:
      - handle-syncwith

    outputs:
      transpiler-artifact-name: ${{ steps.artifact-names.outputs.transpiler }}
      examples-artifact-name: ${{ steps.artifact-names.outputs.examples }}

    env:
      CONTAINER_TMP: /opt/
      HOST_TMP: /home/runner/work/_temp/
      DEBIAN_FRONTEND: noninteractive
      BOOST_VERSION: "1.80.0"

    container:
      image: ubuntu:22.04
      volumes:
        - /home/runner/work/_temp/:/opt/

    steps:
      - name: Install dependencies
        run: |
          env && \
          apt update && \
          apt install -y \
            build-essential \
            libssl-dev \
            cmake \
            ninja-build \
            git \
            libicu-dev \
            curl \
            pkg-config

      - name: Print toolchain information
        run: |
          git --version
          cc --version
          cmake --version
          ninja --version

      - name: Checkout sources
        # We need full history, because during CMake config stage we are finding the nearest tag
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: false

      # Workaround: https://github.com/actions/checkout/issues/1169
      - name: Mark directory as safe
        run: |
          git config --system --add safe.directory $PWD

      - name: Checkout submodules
        run: |
          git submodule update --init --recursive --depth=1

      - name: Checkout modules to specified refs
        if: needs.handle-syncwith.outputs.prs-refs != ''
        uses: NilFoundation/ci-cd/actions/recursive-checkout@v1
        # TODO: figure out the mapping of volumes and use variable here, not hardcoded path
        with:
          paths: |
            /__w/zkLLVM/zkLLVM/**
            !/__w/zkLLVM/zkLLVM/
            !/__w/zkLLVM/zkLLVM/**/.git/**
          refs: ${{ needs.handle-syncwith.outputs.prs-refs }}

      - name: Clean index.lock files if checkout step was cancelled or failed
        if: cancelled() || failure()
        run: |
          find .git -name 'index.lock' -exec rm -v {} \;

      - name: Install boost
        uses: MarkusJx/install-boost@v2.4.1
        id: install-boost
        with:
            # A list of supported versions can be found here:
            # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
            boost_version: ${{ env.BOOST_VERSION }}
            boost_install_dir: ${{ env.CONTAINER_TMP }}
            platform_version: 22.04
            toolset: gcc
            arch: x86

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Configure CMake
        env:
          BOOST_ROOT: "${{ steps.install-boost.outputs.BOOST_ROOT }}"
        run: |
          cmake . \
            -G "Ninja" \
            -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTS=TRUE \
            -DRSLANG_BUILD_EXTENDED=TRUE \
            -DRSLANG_BUILD_TOOLS=cargo \
            -DGENERATE_EVM_VERIFIER=TRUE

      - name: Build zkllvm
        run: |
          cmake --build build -t assigner clang transpiler

      - name: Build IR of the C++ examples
        run: |
          cmake --build build -t circuit_cpp_examples
          ls -al ./build/examples/cpp

      - name: Build circuit and assigner of the C++ examples
        run: |
          cmake --build build -t assign_cpp_examples

      - name: Copy examples' circuits and assignments for uploading
        run: |
          chmod +x ./examples/copy_artifacts.sh
          ./examples/copy_artifacts.sh build/examples/cpp examples_output

      - name: Set aritfacts' names
        id: artifact-names
        run: |
          echo "transpiler=transpiler-output" >> $GITHUB_OUTPUT
          echo "examples=circuits-and-assignments" >> $GITHUB_OUTPUT

      - name: Upload examples' circuits and assignments artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact-names.outputs.examples }}
          path: |
            examples_output

      # - name: Run tests pallas
      #   run: |
      #     chmod +x ./tests/run_tests.sh
      #     bash ./tests/run_tests.sh pallas -j$(nproc)

      # - name: Run tests bls12381
      #   run: |
      #     chmod +x ./tests/run_tests.sh
      #     bash ./tests/run_tests.sh bls12381 -j$(nproc)

      # - name: Run tests on faulty inputs
      #   run: |
      #     chmod +x ./tests/run_tests_faulty_input.sh
      #     bash ./tests/run_tests_faulty_input.sh pallas -j$(nproc)
      - name: Get transpiler output for integration testing
        run: |
          cmake --build build \
            -t arithmetics_cpp_example_evm_verifier \
            -t polynomial_cpp_example_evm_verifier \
            -t pallas_curve_multiplication_cpp_example_evm_verifier

      - name: Upload examples' circuits and assignments artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact-names.outputs.transpiler }}
          path: |
            build/examples/cpp/transpiler_output_*

      # - name: Build tests
      #   run: |
      #     make -C build all_expected_res_tests -j$(nproc)
      #     make -C build all_circuit_tests -j$(nproc)

      - name: Run assigner tests
        run: |
          cd libs/assigner/test
          chmod +x run_tests.py
          python3 run_tests.py ../../../build/bin/assigner/assigner
          cd ../../../

      - name: Build proof for the circuit of the C++ examples
        run: |
          cmake --build build -t prove_cpp_examples
      # - name: Run tests
      #   run: |
      #     chmod +x ./tests/run_tests.sh
      #     bash ./tests/run_tests.sh --clean -j$(nproc)

      # - name: Run tests on faulty inputs
      #   run: |
      #     chmod +x ./tests/run_tests_faulty_input.sh
      #     bash ./tests/run_tests_faulty_input.sh -j$(nproc)

      # - name: Build proof for the circuit of the C++ examples
      #   run: |
      #     make -C build prove_cpp_examples -j$(nproc)

      # - name: Build rslang
      #   run: |
      #     export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$(pwd)/build/libs/circifier/llvm/lib"
      #     echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(pwd)/build/libs/circifier/llvm/lib" >> $GITHUB_ENV
      #     make -C build rslang -j$(nproc)

      # - name: Build IR of the Rust examples
      #   run: |
      #     make -C build circuit_rust_examples -j$(nproc)
      #     ls -al ./build/examples/rust/target/assigner-unknown-unknown/release/examples

      # - name: Build circuit and assigner of the Rust examples
      #   run: |
      #     make -C build assign_rust_examples -j$(nproc)

      # - name: Build proof for the circuit of the Rust examples
      #   run: |
      #     make -C build prove_rust_examples -j$(nproc)


  generate-proofs:
    name: Generate proofs for cpp examples
    needs:
      - build-and-test-linux
      - handle-syncwith
    uses: NilFoundation/proof-producer/.github/workflows/reusable-generate-proofs.yml@add-reusable-wflw
    with:
      artifact-name: ${{ needs.build-and-test-linux.outputs.examples-artifact-name }}
      proof-producer-ref: add-reusable-wflw
      refs: ${{ needs.handle-syncwith.outputs.prs-refs }}
      targets: |
        polynomial_cpp_example
        arithmetics_cpp_example
        pallas_curve_multiplication_cpp_example


  verify-zkllvm-proofs:
    name: Verify built-it proofs with EVM-placeholder
    needs:
      - build-and-test-linux
      - handle-syncwith
    uses: NilFoundation/evm-placeholder-verification/.github/workflows/reusable-verify-proofs.yml@integration-testing
    with:
      artifact-name: ${{ needs.build-and-test-linux.outputs.transpiler-artifact-name }}
      evm-placeholder-verification-ref: integration-testing
      refs: ${{ needs.handle-syncwith.outputs.prs-refs }}
      test-names: |
        transpiler_output_polynomial_cpp_example
        transpiler_output_arithmetics_cpp_example
        transpiler_output_pallas_curve_multiplication_cpp_example


  merge-proofs-to-transpiler-output:
    runs-on: ubuntu-22.04
    needs:
      - generate-proofs
      - build-and-test-linux
    outputs:
      merged-artifact-name: ${{ steps.artifact-name.outputs.merged }}
    steps:
      - name: Download artifact with proofs
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.generate-proofs.outputs.artifact-name }}

      - name: Download artifact with transpiler output
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build-and-test-linux.outputs.transpiler-artifact-name }}

      - name: Merge proofs into transpiler output
        run: |
          copy_failed=0
          while read dir; do
            base_name=${dir#./transpiler_output_}

            if [[ -d "$base_name" ]]; then
              if ! cp "${base_name}/proof.bin" "${dir}/"; then
                echo "Failed to copy proof.bin to ${dir}" >&2
                copy_failed=1
              else
                echo "proof.bin added to ${dir}"
              fi
            else
              echo "Error: No matching directory found for ${dir}" >&2
            fi
          done < <(find . -type d -name "transpiler_output_*")

          if [ $copy_failed -eq 1 ]; then
            echo "One or more copy operations failed."
            exit 1
          fi

      - name: Set aritfact name
        id: artifact-name
        run: |
          echo "merged=transpiler-output-merged-proofs" >> $GITHUB_OUTPUT

      - name: Upload merged artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact-name.outputs.merged }}
          path: |
            transpiler_output_*


  verify-proof-producer-proofs:
    name: Verify proof-producer proofs with EVM-placeholder
    needs:
      - handle-syncwith
      - merge-proofs-to-transpiler-output
    uses: NilFoundation/evm-placeholder-verification/.github/workflows/reusable-verify-proofs.yml@integration-testing
    with:
      artifact-name: ${{ needs.merge-proofs-to-transpiler-output.outputs.merged-artifact-name }}
      evm-placeholder-verification-ref: integration-testing
      refs: ${{ needs.handle-syncwith.outputs.prs-refs }}
      test-names: |
        transpiler_output_polynomial_cpp_example
        transpiler_output_arithmetics_cpp_example
        transpiler_output_pallas_curve_multiplication_cpp_example
