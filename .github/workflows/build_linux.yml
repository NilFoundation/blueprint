name: build-linux

on:
  push:
    branches: [ master ]
  pull_request:

concurrency:
  group: ${{
    ( github.ref == 'refs/heads/master' &&
    format('{0}/{1}', github.run_id, github.run_attempt) )
    ||
    format('{0}/{1}', github.workflow, github.ref) }}
  cancel-in-progress: true

jobs:
  handle-syncwith:
    if: github.event_name == 'pull_request'
    name: Call Reusable SyncWith Handler
    uses: NilFoundation/ci-cd/.github/workflows/reusable-handle-syncwith.yml@v1
    with:
      ci-cd-ref: 'v1'
    secrets: inherit

  build-linux:
    runs-on: [ self-hosted, Linux, X64, aws_autoscaling ]

    needs:
      - handle-syncwith

    env:
      CONTAINER_TMP: /opt/
      HOST_TMP: /home/runner/work/_temp/
      DEBIAN_FRONTEND: noninteractive
      BOOST_VERSION: "1.80.0"

    container:
      image: ubuntu:22.04
      volumes:
        - /home/runner/work/_temp/:/opt/

    steps:
      - name: Install dependencies
        run: |
          env && \
          apt update && \
          apt install -y \
            build-essential \
            libssl-dev \
            cmake \
            ninja-build \
            git \
            libicu-dev \
            curl \
            pkg-config

      - name: Print toolchain information
        run: |
          git --version
          cc --version
          cmake --version
          ninja --version

      - name: Checkout sources
        # We need full history, because during CMake config stage we are finding the nearest tag
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: false

      # Workaround: https://github.com/actions/checkout/issues/1169
      - name: Mark directory as safe
        run: |
          git config --system --add safe.directory $PWD

      - name: Checkout submodules
        run: |
          git submodule update --init --recursive --depth=1

      - name: Checkout modules to specified refs
        if: needs.handle-syncwith.outputs.prs-refs != ''
        uses: NilFoundation/ci-cd/actions/recursive-checkout@v1
        # TODO: figure out the mapping of volumes and use variable here, not hardcoded path
        with:
          paths: |
            /__w/zkLLVM/zkLLVM/**
            !/__w/zkLLVM/zkLLVM/
            !/__w/zkLLVM/zkLLVM/**/.git/**
          refs: ${{ needs.handle-syncwith.outputs.prs-refs }}

      - name: Clean index.lock files if checkout step was cancelled or failed
        if: cancelled() || failure()
        run: |
          find .git -name 'index.lock' -exec rm -v {} \;

      - name: Install boost
        uses: MarkusJx/install-boost@v2.4.1
        id: install-boost
        with:
            # A list of supported versions can be found here:
            # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
            boost_version: ${{ env.BOOST_VERSION }}
            boost_install_dir: ${{ env.CONTAINER_TMP }}
            platform_version: 22.04
            toolset: gcc
            arch: x86

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Configure CMake
        env:
          BOOST_ROOT: "${{ steps.install-boost.outputs.BOOST_ROOT }}"
        run: |
          cmake -G "Ninja" \
            -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTS=TRUE \
            -DRSLANG_BUILD_EXTENDED=TRUE \
            -DRSLANG_BUILD_TOOLS=cargo .

      - name: Build zkllvm
        run: |
          cmake --build build -t assigner clang transpiler

      - name: Build IR of the C++ examples
        run: |
          cmake --build build -t circuit_cpp_examples
          ls -al ./build/examples/cpp

      - name: Build circuit and assigner of the C++ examples
        run: |
          cmake --build build -t assign_cpp_examples

      - name: Build tests
        run: |
          cmake --build build -t all_expected_res_tests
          cmake --build build -t all_circuit_tests

      - name: Run tests pallas
        run: |
          chmod +x ./tests/run_tests.sh
          bash ./tests/run_tests.sh pallas

      - name: Run tests bls12381
        run: |
          chmod +x ./tests/run_tests.sh
          bash ./tests/run_tests.sh bls12381

      - name: Run tests on faulty inputs
        run: |
          chmod +x ./tests/run_tests_faulty_input.sh
          bash ./tests/run_tests_faulty_input.sh pallas

      - name: Build proof for the circuit of the C++ examples
        run: |
          cmake --build build -t prove_cpp_examples

      - name: Build rslang
        run: |
          export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$(pwd)/build/libs/circifier/llvm/lib"
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(pwd)/build/libs/circifier/llvm/lib" >> $GITHUB_ENV
          cmake --build build -t rslang

      - name: Build IR of the Rust examples
        run: |
          cmake --build build -t circuit_rust_examples
          ls -al ./build/examples/rust/target/assigner-unknown-unknown/release/examples

      - name: Build circuit and assigner of the Rust examples
        run: |
          cmake --build build -t assign_rust_examples

      - name: Build proof for the circuit of the Rust examples
        run: |
          cmake --build build -t prove_rust_examples
