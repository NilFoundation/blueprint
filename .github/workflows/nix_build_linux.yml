name: Run tests

on:
  # Triggers the workflow on pull request events but only for the master branch
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

jobs:
  handle-syncwith:
    if: github.event_name == 'pull_request'
    name: Call Reusable SyncWith Handler
    uses: NilFoundation/ci-cd/.github/workflows/reusable-handle-syncwith.yml@v1
    with:
      ci-cd-ref: 'v1'
    secrets: inherit

  build-and-test-with-nix:
    needs: [ handle-syncwith ]
    runs-on: ["self-hosted", "aws_autoscaling"]
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Checkout submodules to specified refs
        if: inputs.submodules-refs != ''
        uses: NilFoundation/ci-cd/actions/recursive-checkout@master
        with:
          refs: ${{ inputs.submodules-refs }}
          paths: |
            ${{ github.workspace }}/**
            !${{ github.workspace }}/
            !${{ github.workspace }}/**/.git/**

      # nix is taken from the cloud-init template, no need to install it.
      - name: Setup build
        run: |
          nix develop .?submodules=1# -c cmake -G Ninja -B build-ninja -DCMAKE_CXX_STANDARD=17 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_ENABLE_TESTS=TRUE && \
          cd build-ninja

      - name: Build zkllvm
        run: |
          nix develop -c ninja assigner clang transpiler

      - name: Build IR of the C++ examples
        run: |
          nix develop -c ninja -k 0 compile_cpp_examples
          ls -al ./examples/cpp

      - name: Build circuits(.crct) of the C++ examples
        run: |
          nix develop ../ -c ninja -k 0 cpp_examples_generate_crct
          ls -al ./examples/cpp

      - name: Build assignment tables(.tbl) of the C++ examples
        run: |
          nix develop -c ninja -k 0 cpp_examples_generate_tbl_no_check
          ls -al ./examples/cpp

      - name: Copy assigner output from separate generation mode
        run: |
          bash ../tests/copy_assigner_outputs.sh ./examples/cpp separate_generatuon

      - name: Run simultaneous .tbl and .crct generation of the C++ examples
        run: |
          nix develop -c ninja -k 0 cpp_examples_generate_both
          ls -al ./examples/cpp

      - name: Copy assigner output from simultaneous generation mode
        run: |
          bash ../tests/copy_assigner_outputs.sh simultaneous_generation

      - name: Compare different assigner modes output
        run: |
          bash ../tests/compare_folders_content.sh separate_generatuon simultaneous_generation

      - name: Run size estimation for C++ examples
        run: |
          nix develop -c ninja -k 0 cpp_examples_estimate_size

      - name: Copy examples' circuits and assignments for uploading
        run: |
          chmod +x ./examples/copy_artifacts.sh
          bash ../examples/copy_artifacts.sh examples/cpp examples_output

      - name: Set aritfacts' names
        id: artifact-names
        run: |
          echo "transpiler=transpiler-output" >> $GITHUB_OUTPUT
          echo "examples=circuits-and-assignments" >> $GITHUB_OUTPUT

      - name: Upload examples' circuits and assignments artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact-names.outputs.examples }}
          path: |
            build-ninja/examples_output

